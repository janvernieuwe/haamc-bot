# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    token:            '%env(TOKEN)%'
    adminRole:        '%env(ADMIN_ROLE)%'
    permissionsRole:  '%env(PERMISSIONS_ROLE)%'
    modRole:          '%env(ANIMEMOD_ROLE)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $season:              '%env(COTS_SEASON)%'
            $adminRole:           '%env(ADMIN_ROLE)%'
            $permissionsRole:     '%env(PERMISSIONS_ROLE)%'
            $roleId:              '%env(PERMISSIONS_ROLE)%'
            $everyoneRole:        '%env(EVERYONE_ROLE)%'
            $seasonalChannelId:   '%env(SEASONAL_CHANNEL)%'
            $spoilerChannelId:    '%env(SPOILER_CHANNEL)%'
            $emojiChannelId:      '%env(EMOJI_CHANNEL_ID)%'
            $sotwChannelId:       '%env(SOTW_CHANNEL_ID)%'
            $cotsChannelId:       '%env(COTS_CHANNEL_ID)%'
            $rewatchChannelId:    '%env(REWATCH_CHANNEL_ID)%'
            $miraiRole:           '%env(MIRAI_ROLE)%'
            $modRole:             '%env(ANIMEMOD_ROLE)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    #    App\Controller\:
    #        resource: '../src/Controller'
    #        tags: ['controller.service_arguments']
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    log.null:
        class: Psr\Log\NullLogger

    jikan.cache.filesystem:
        class: Doctrine\Common\Cache\FilesystemCache
        arguments:
          - '%kernel.cache_dir%/jikan'
          - 'app.jikan'

    jikan.cache.doctrine:
        class: Kevinrob\GuzzleCache\Storage\DoctrineCacheStorage
        arguments: ['@jikan.cache.filesystem']

    jikan.cache.strategy:
        class: Kevinrob\GuzzleCache\Strategy\GreedyCacheStrategy
        arguments:
          - '@jikan.cache.doctrine'
          - 604800

    jikan.cache.middleware:
        class: Kevinrob\GuzzleCache\CacheMiddleware
        arguments: ['@jikan.cache.strategy']

    jikan.stack:
        class: GuzzleHttp\HandlerStack
        factory: [GuzzleHttp\HandlerStack, 'create']
        calls:
          - ['push', ['@jikan.cache.middleware', 'cache']]

    jikan.guzzle:
        class: GuzzleHttp\Client
        arguments:
          -
            handler: '@jikan.stack'

    Jikan\MyAnimeList\MalClient:
        class: Jikan\MyAnimeList\MalClient
        arguments:
          - '@jikan.guzzle'

    App\Channel\RewatchChannel:
        class: App\Channel\RewatchChannel
        autowire: false

    App\Channel\SimpleChannelCreator:
        class: App\Channel\SimpleChannelCreator
        autowire: false

    Jikan\JikanPHP\JikanPHPClient:
        class: Jikan\JikanPHP\JikanPHPClient
        autowire: false

    Mal2Anilist\Converter:
        class: Mal2Anilist\Converter
